- name: validation
  any_errors_fatal: true
  block:

    - name: Check if MediaCMS is Debian bulleye
      ansible.builtin.fail:
        msg: Only Debian
      when:
       - ansible_distribution != 'Debian'
       - ansible_distribution_release != 'bullseye'

    - name: Check postgresql_servers group
      ansible.builtin.fail:
        msg: Only one host in postgresql_servers
      when:
        - "'postgresql_servers' in groups"
        - "groups['postgresql_servers']|length != 1"

    - name: Gather facts from postgresql servers
      ansible.builtin.setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['postgresql_servers'] }}"
      when:
        - "'postgresql_servers' in groups"

    - name: Check if postgresql server is Debian
      ansible.builtin.fail:
        msg: Only Debian
      when:
        - "'postgresql_servers' in groups"
        - hostvars[groups['postgresql_servers'][0]]['ansible_distribution'] != 'Debian'
        - hostvars[groups['postgresql_servers'][0]]['ansible_distribution_release'] != 'bullseye'

    - name: Check rabbitmq_servers group
      ansible.builtin.fail:
        msg: Only one host in rabbitmq_servers
      when:
        - "'rabbitmq_servers' in groups"
        - "groups['rabbitmq_servers']|length != 1"


    - name: Gather facts from rabbitmq servers
      ansible.builtin.setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['rabbitmq_servers'] }}"
      when:
        - "'rabbitmq_servers' in groups"

    - name: Check RABBITMQ vars
      ansible.builtin.fail:
       msg: "To use rabbitmq you must define RABBIT_BROKER_URL, RABBIT_CELERY_RESULT_BACKEND, RABBIT_MQ_ADMIN_USER, RABBIT_MQ_ADMIN_PASSWORD and RABBIT_MQ_VHOST vars"
      when:
        - RABBIT_BROKER_URL is defined and ((RABBIT_CELERY_RESULT_BACKEND is undefined) or (RABBIT_MQ_ADMIN_USER is undefined) or (RABBIT_MQ_ADMIN_PASSWORD is undefined) or (RABBIT_MQ_VHOST is undefined) or (RABBIT_MQ_VHOST_USER is undefined) or (RABBIT_MQ_VHOST_PASSWORD is undefined))

    - name: Check redis_servers group
      ansible.builtin.fail:
        msg: Only one host in redis_servers
      when:
        - "'redis_servers' in groups"
        - "groups['redis_servers']|length != 1"

    - name: Gather facts from redis_servers servers
      ansible.builtin.setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['redis_servers'] }}"
      when:
        - "'redis_servers' in groups"


- name: basic setup MediaCMs
  any_errors_fatal: true
  block:

    - name: check if systemd units are present and running
      ansible.builtin.systemd:
       name: '{{ item }}'
       enabled: no
       state: stopped
       daemon_reload: yes
      with_items: [celery_long, celery_short, celery_beat, mediacms.service]
      ignore_errors: true

    - name: Installs software-properties-common
      ansible.builtin.apt:
        name: [software-properties-common, sudo, python3-psycopg2]
        state: latest

    - name: Installs repos
      ansible.builtin.command: "add-apt-repository -y {{ item }}"
      with_items: [contrib, non-free]

    - name: Update apt-get repo and cache
      ansible.builtin.apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600
        upgrade: yes

    - name: Installs common packages
      ansible.builtin.apt:
        name: [python3-venv, python3-dev, virtualenv, nginx, git, gcc, vim, unzip, imagemagick, python3-certbot-nginx, certbot, wget, xz-utils]
        state: latest

    - name: Delete git clone, if exists
      ansible.builtin.file:
        state: absent
        path: /home/mediacms.io/mediacms

    - name: git clone
      ansible.builtin.git:
        repo: 'git@github.com:mediacms-io/mediacms.git'
        dest: /home/mediacms.io/mediacms
        clone: yes
        accept_hostkey: yes
        force: true

    - name: virtual env and libs
      ansible.builtin.pip:
       virtualenv: /home/mediacms.io/
       virtualenv_command: /usr/bin/python3 -m venv
       extra_args: --upgrade pip
       requirements: /home/mediacms.io/mediacms/requirements.txt

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: '/home/mediacms.io/mediacms/{{ item }}'
        state: directory
        mode: '0755'
      with_items: [logs, pids]

    - name: SECRET_KEY
      ansible.builtin.command: /home/mediacms.io/bin/python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
      register: SECRET_KEY

    - set_fact:
          SECRET_KEY: '{{ SECRET_KEY.stdout }}'

    - name: Unarchive ffmpeg
      ansible.builtin.unarchive:
        src: https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
        creates: /usr/src/ffmpeg-6.0-amd64-static
        dest: /usr/src
        remote_src: yes

    - name: Install ffmpeg
      ansible.builtin.copy:
        src: '/usr/src/ffmpeg-6.0-amd64-static/{{ item }}'
        dest: '/usr/local/bin/{{ item }}'
        owner: root
        group: root
        mode: '0777'
        remote_src: yes
      with_items: [ffmpeg, ffprobe, qt-faststart]

    - name: Unarchive Bento4
      ansible.builtin.unarchive:
        src: http://zebulon.bok.net/Bento4/binaries/Bento4-SDK-1-6-0-637.x86_64-unknown-linux.zip
        creates: /home/mediacms.io/mediacms/Bento4-SDK-1-6-0-637.x86_64-unknown-linux
        dest: /home/mediacms.io/mediacms/
        remote_src: yes

    - name: hls dir
      ansible.builtin.file:
        path: /home/mediacms.io/mediacms/media_files/hls
        state: directory


- name: rabbitmq remote
  rescue:
    - include_tasks: rescue.yml
  any_errors_fatal: true
  when:
    - "'rabbitmq_servers' in groups"
  block:

    - name: Set RABBIT_MQ_IP
      ansible.builtin.set_fact:
        RABBIT_MQ_IP: "{{ hostvars[groups['rabbitmq_servers'][0]]['ansible_default_ipv4']['address'] }}"

    - name: Set RABBIT_BROKER_URL
      ansible.builtin.set_fact:
        RABBIT_BROKER_URL: "pyamqp://{{ RABBIT_MQ_VHOST_USER }}:{{ RABBIT_MQ_VHOST_PASSWORD }}@{{ RABBIT_MQ_IP }}/{{ RABBIT_MQ_VHOST }}"

    - name: Set RABBIT_CELERY_RESULT_BACKEND
      ansible.builtin.set_fact:
        RABBIT_CELERY_RESULT_BACKEND: "rpc://"

    - name: Ensure that the vhost {{ RABBIT_MQ_VHOST }} exists in RabbitMQ.
      delegate_to: "{{ RABBIT_MQ_IP  }}"
      community.rabbitmq.rabbitmq_vhost:
        name: "{{ RABBIT_MQ_VHOST }}"
        node: "rabbit"
        state: present

    - name: Ensure that the user {{ RABBIT_MQ_VHOST_USER }} exists in RabbitMQ.
      delegate_to: "{{ RABBIT_MQ_IP  }}"
      register: rmq_user
      community.rabbitmq.rabbitmq_user:
        user: "{{ RABBIT_MQ_VHOST_USER }}"
        password: "{{ RABBIT_MQ_VHOST_PASSWORD }}"
        node: "rabbit"
        state: present
        permissions:
          - vhost: "{{ RABBIT_MQ_VHOST }}"
            configure_priv: .*
            read_priv: .*
            write_priv: .*

    - name: Set RABBIT_MQ_SETUP
      ansible.builtin.set_fact:
        RABBIT_MQ_SETUP: true

    - debug:
        msg: "RABBIT_MQ_VHOST: {{ RABBIT_MQ_VHOST }}, RABBIT_MQ_VHOST_USER: {{ RABBIT_MQ_VHOST_USER }}, RABBIT_MQ_VHOST_PASSWORD: {{ RABBIT_MQ_VHOST_PASSWORD }}, RABBIT_MQ_IP: {{ RABBIT_MQ_IP }}"

- name: postgresql remote
  any_errors_fatal: true
  when:
    - "'postgresql_servers' in groups"
  rescue:
    - include_tasks: rescue.yml
  block:

    - name: Set POSTGRESQL_IP
      ansible.builtin.set_fact:
        POSTGRESQL_IP: "{{ hostvars[groups['postgresql_servers'][0]]['ansible_default_ipv4']['address'] }}"

    - name: test remote postgresql
      become: yes
      become_user: "{{ postgresql_admin_user }}"
      delegate_to: "{{ POSTGRESQL_IP }}"
      community.postgresql.postgresql_query:
        db: "{{ postgresql_preinstalled_db }}"
        query: SELECT version()
      register: sql_data

    - ansible.builtin.debug:
        var: sql_data.query_result.0.version

    - name: "create remote postgresql users"
      become: yes
      become_user: "{{ postgresql_admin_user }}"
      delegate_to: "{{ POSTGRESQL_IP }}"
      community.general.postgresql_user:
        name: "{{ POSTGRESQL_USER }}"
        password: "{{ POSTGRESQL_PASSWD }}"
        encrypted: True
        expires: "infinity"

    - name: "create remote postgresql dbs"
      become: yes
      become_user: "{{ postgresql_admin_user }}"
      delegate_to: "{{ POSTGRESQL_IP }}"
      community.general.postgresql_db:
        name: "{{ POSTGRESQL_DATABASE }}"
        owner: "{{ POSTGRESQL_USER }}"
        template: template0
        encoding: UTF8

    - name: Set POSTGRESQL_REMOTE_SETUP
      ansible.builtin.set_fact:
        POSTGRESQL_REMOTE_SETUP: true


- name: postgresql local
  any_errors_fatal: true
  when:
    - "'postgresql_servers' not in groups"
  block:

    - name: Installs postgresql local
      ansible.builtin.apt:
        name: [postgresql]
        state: latest

    - name: Set POSTGRESQL_IP
      ansible.builtin.set_fact:
        POSTGRESQL_IP: "127.0.0.1"

    - name: test local postgresql
      become: true
      become_user: "{{ postgresql_admin_user }}"
      community.postgresql.postgresql_query:
        db: "{{ postgresql_preinstalled_db }}"
        query: SELECT version()
      register: sql_data

    - ansible.builtin.debug:
        var: sql_data.query_result.0.version

    - name: "create local postgresql users"
      become: yes
      become_user: "{{ postgresql_admin_user }}"
      community.general.postgresql_user:
        name: "{{ POSTGRESQL_USER }}"
        password: "{{ POSTGRESQL_PASSWD }}"
        encrypted: True
        expires: "infinity"

    - name: "create local postgresql dbs"
      become: yes
      become_user: "{{ postgresql_admin_user }}"
      community.general.postgresql_db:
        name: "{{ POSTGRESQL_DATABASE }}"
        owner: "{{ POSTGRESQL_USER }}"
        template: template0
        encoding: UTF8

    - name: Set POSTGRESQL_LOCAL_SETUP
      ansible.builtin.set_fact:
        POSTGRESQL_LOCAL_SETUP: true


- name: redis remote
  rescue:
    - include_tasks: rescue.yml
  any_errors_fatal: true
  when:
    - "'redis_servers' in groups"
  block:

    - name: Set REDIS_IP
      ansible.builtin.set_fact:
        REDIS_IP: "{{ hostvars[groups['redis_servers'][0]]['ansible_default_ipv4']['address'] }}"

    - name: Set REDIS_REMOTE_SETUP
      ansible.builtin.set_fact:
        REDIS_REMOTE_SETUP: true


- name: redis local
  rescue:
    - include_tasks: rescue.yml
  any_errors_fatal: true
  when:
    - "'redis_servers' not  in groups"
  block:

    - name: Set REDIS_IP
      ansible.builtin.set_fact:
        REDIS_IP: "127.0.0.1"

    - name: Installs redis-server if neccesary
      ansible.builtin.apt:
        name: [redis-server]
        state: latest
